INPUT TYPES

TARGET MATRICES     TRANSFORM MATRICES  ENVIRONMENT
[+foo, -bar][+bar] -> [-foo][+bar] /     [+bar]_V#
t ->                d           / [V,-reduced]_V
+nasal ->           +coronal    / s_]word
0 ->                e           / [+dr]_[+sg]

TARGETS: matched against 
"[+foo, -bar][+bar]" // start
    [["+foo, -bar"],["+bar"]] // parse matched brackets
        [["+foo","-bar"],["+bar"]] // split by commas and trim
            [[foo: 1, bar: -1],[bar: 1]] // parse feature values, complete
"t" // start
    ["t"] // convert string into a list
        [Sounds.t] // found in sound index, inherit all properties, complete

"+nasal" // start
    ["+nasal"] // convert string into a list
        [nasal: 1] // parse feature values, complete
        
"0" // start, special character, complete

TRANSFORMS
"[-foo][+bar]" // start
    [["-foo"],["+bar"]] // matched brackets
        [[foo: -1],[bar: 1]] // parse feature values, complete




Strategy: Search for target. Test for environment. Apply transformation.
input: string. convert to list of FeatureBundles (Datum)

while(target has not yet been found) {
    
}

output: list of FeatureBundles (transformed Datum). convert to string.

required:
string to features
    strategy: greedy search for a match in Sounds.
        if found, continue to next character.
        if not found, check for a match in Diacritics.
        if found, feature and glyph merge with last character, continue to next character.
        if not found, report the error and and glyph merge with the last character, continue to next.
features to string


OOP
    Matched Brackets? Recurse and insert